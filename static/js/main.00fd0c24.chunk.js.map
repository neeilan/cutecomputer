{"version":3,"sources":["cute.js","assembler.js","MachineStateView.js","App.js","reportWebVitals.js","index.js"],"names":["REGISTER_NAMES","0","1","2","3","4","5","6","7","8","REGISTER_NUMS","OPCODES","name","args","desc","9","10","11","12","13","14","15","16","17","varLen","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","OPS","HALT","ADD","ADDI","SUB","SUBI","ASSERT","LABEL","JMPL","JMPGT","JMPGTE","JMPEQ","PRINT","SETI","JMPI","JMPEQI","JMPEQIL","PRINTBYTE","DATA","PRINTSTRL","PRINTBYTEI","JMPEQL","SET","JMPLT","JMPLTE","LOAD","PUSH","POP","CALL","RET","CHDATA","STORE","AOL","STORI","JMPNEQIL","MUL","MULI","DIV","DIVI","PCALL","PRET","numArgs","Object","keys","forEach","k","push","c","char","charCodeAt","_execute","memory","registers","codeStart","codeEnd","oneStep","print","_labels","_statics","currInstr","opCode","label","lhs","rhs","rip","alert","Math","floor","addr","undefined","process","stdout","write","String","fromCharCode","byteToPrint","console","log","topOfStack","ra","registerStateAtCallTime","pcall_args","i","length","splice","registerStateAtReturnTime","retVals","v","CuteMachine","this","execute","executeStep","setIp","val","require","lex","source","tokens","currTok","inComment","split","token","join","trim","indexOf","assemble","machine","out","code","disasm","slice","labels","labelNum","opStr","op","Error","toString","opMeta","parseInt","str","j","arg","argAsInt","isNaN","numVarArgs","varArg","memLoad","contents","b","module","exports","loadAtAddr","asm","Assemble","STYLES","MachineStateView","props","Array","fill","numAddrsToDisplay","numBytesPerRow","state","memDisplayStartAddr","asmArea","loadAddr","disasmTokens","disasmIsFresh","docInstr","setState","num","e","newAddr","instrs","entries","meta","bytes","memTable","ripValueAdj","RIP","rspValueAdj","RSP","rbpValueAdj","RBP","_","cols","style","backgroundColor","map","offset","dynaColor","absoluteAddr","disasmAvailable","overflow","class","type","width","border","onChange","memSet","target","value","disabled","className","Container","Row","textAlign","Col","md","marginBottom","Table","bordered","responsive","size","isRip","isRsp","isRbp","regSet","Button","variant","onClick","run","marginLeft","step","memPrev","memNext","paddingLeft","inspectAddr","placeholder","marginTop","sm","height","minHeight","borderColor","asmAreaEdit","InputGroup","FormControl","setLoadAddr","Append","overflowY","availableInstrs","instr","Badge","pill","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oIAAMA,EAAiB,CACrBC,EAAI,KACJC,EAAI,KACJC,EAAI,KACJC,EAAI,KACJC,EAAI,KACJC,EAAI,MACJC,EAAI,MACJC,EAAI,MACJC,EAAI,OAGAC,EAAgB,CACpB,GAAO,EACP,GAAO,EACP,GAAO,EACP,GAAO,EACP,GAAO,EACP,IAAO,EACP,IAAQ,EACR,IAAQ,EACR,IAAQ,GAGJC,EAAU,CACdV,EAAG,CAAEW,KAAM,OAAQC,KAAM,EAAGC,KAAM,2EAClCZ,EAAG,CAAEU,KAAM,MAAOC,KAAM,EAAIC,KAAM,oDAClCX,EAAG,CAAES,KAAM,OAAQC,KAAM,EAAIC,KAAM,2DACnCV,EAAG,CAAEQ,KAAM,MAAOC,KAAM,EAAIC,KAAM,oDAClCT,EAAG,CAAEO,KAAM,OAAQC,KAAM,EAAIC,KAAM,2DACnCR,EAAG,CAAEM,KAAM,SAAUC,KAAM,EAAIC,KAAM,IACrCP,EAAG,CAAEK,KAAM,QAASC,KAAM,EAAIC,KAAM,kFACpCN,EAAG,CAAEI,KAAM,OAAQC,KAAM,EAAIC,KAAM,IACnCL,EAAG,CAAEG,KAAM,QAASC,KAAM,EAAIC,KAAM,IACpCC,EAAG,CAAEH,KAAM,SAAUC,KAAM,EAAIC,KAAM,IACrCE,GAAI,CAAEJ,KAAM,QAASC,KAAM,EAAIC,KAAM,IACrCG,GAAI,CAAEL,KAAM,QAASC,KAAM,EAAIC,KAAM,IACrCI,GAAI,CAAEN,KAAM,OAAQC,KAAM,EAAIC,KAAM,qDACpCK,GAAI,CAAEP,KAAM,OAAQC,KAAM,EAAIC,KAAM,IACpCM,GAAI,CAAER,KAAM,SAAUC,KAAM,EAAIC,KAAM,IACtCO,GAAI,CAAET,KAAM,UAAWC,KAAM,EAAIC,KAAM,uFACvCQ,GAAI,CAAEV,KAAM,YAAaC,KAAM,EAAIC,KAAM,IACzCS,GAAI,CAAEX,KAAM,OAAQC,KAAM,EAAGW,QAAQ,EAAOV,KAAM,IAClDW,GAAI,CAAEb,KAAM,YAAaC,KAAM,EAAIC,KAAM,IACzCY,GAAI,CAAEd,KAAM,aAAcC,KAAM,EAAIC,KAAM,IAC1Ca,GAAI,CAAEf,KAAM,SAAUC,KAAM,EAAIC,KAAM,IACtCc,GAAI,CAAEhB,KAAM,MAAOC,KAAM,EAAIC,KAAM,gEACnCe,GAAI,CAAEjB,KAAM,QAASC,KAAM,EAAIC,KAAM,IACrCgB,GAAI,CAAElB,KAAM,SAAUC,KAAM,EAAIC,KAAM,IACtCiB,GAAI,CAAEnB,KAAM,OAAQC,KAAM,EAAIC,KAAM,qEACpCkB,GAAI,CAAEpB,KAAM,OAAQC,KAAM,EAAIC,KAAM,0FACpCmB,GAAI,CAAErB,KAAM,MAAOC,KAAM,EAAIC,KAAM,2FACnCoB,GAAI,CAAEtB,KAAM,OAAQC,KAAM,EAAIC,KAAM,iGACpCqB,GAAI,CAAEvB,KAAM,MAAOC,KAAM,EAAIC,KAAM,6JACnCsB,GAAI,CAAExB,KAAM,SAAUC,KAAM,EAAGW,QAAQ,EAAOV,KAAM,IACpDuB,GAAI,CAAEzB,KAAM,QAASC,KAAM,EAAIC,KAAM,wEACrCwB,GAAI,CAAE1B,KAAM,MAAOC,KAAM,EAAIC,KAAM,uGACnCyB,GAAI,CAAE3B,KAAM,QAASC,KAAM,EAAIC,KAAM,6EACrC0B,GAAI,CAAE5B,KAAM,WAAYC,KAAM,EAAIC,KAAM,+FACxC2B,GAAI,CAAE7B,KAAM,MAAOC,KAAM,EAAIC,KAAM,oDACnC4B,GAAI,CAAE9B,KAAM,OAAQC,KAAM,EAAIC,KAAM,2DACpC6B,GAAI,CAAE/B,KAAM,MAAOC,KAAM,EAAIC,KAAM,oDACnC8B,GAAI,CAAEhC,KAAM,OAAQC,KAAM,EAAIC,KAAM,2DACpC+B,GAAI,CAAEjC,KAAM,QAASC,KAAM,EAAIC,KAAM,kBACrCgC,GAAI,CAAElC,KAAM,OAAQC,KAAM,EAAIC,KAAM,kBAKhCiC,EAAM,CACVC,KAAO,EACPC,IAAM,EACNC,KAAO,EACPC,IAAM,EACNC,KAAO,EACPC,OAAS,EACTC,MAAQ,EACRC,KAAO,EACPC,MAAQ,EACRC,OAAS,EACTC,MAAQ,GACRC,MAAQ,GACRC,KAAS,GACTC,KAAO,GACPC,OAAS,GACTC,QAAU,GACVC,UAAY,GACZC,KAAO,GACPC,UAAY,GACZC,WAAa,GACbC,OAAS,GACTC,IAAM,GACNC,MAAO,GACPC,OAAS,GACTC,KAAM,GACNC,KAAO,GACPC,IAAM,GACNC,KAAO,GACPC,IAAM,GACNC,OAAS,GACTC,MAAQ,GACRC,IAAM,GACNC,MAAQ,GACRC,SAAU,GACVC,IAAM,GACNC,KAAO,GACPC,IAAM,GACNC,KAAO,GACPC,MAAQ,GACRC,KAAO,IAgBL3B,EAAS,GA6BP4B,EAAU,GAChBC,OAAOC,KAAK/E,GAASgF,SAAQ,SAAAC,GAAC,OAAIJ,EAAQK,KAAKlF,EAAQiF,GAAG/E,SAqC1D,IAAMiF,EAAK,SAAAC,GAAI,OAAKA,EAAKC,WAAW,IAsBpC,SAASC,EAASC,EAAQC,EAAWC,EAAWC,EAASC,EAASC,GAOhE,IAHA,IAAMC,EAAU,GACVC,EAAW,GACbC,EAAYN,EACTM,EAAYL,GAAS,CAC1B,IAAMM,EAAST,EAAOQ,GAEtB,GAzGQ,IAyGJC,EACFH,EAASN,EAAOQ,EAAY,IAAOA,EAAYlB,EAAQmB,GAAU,EACjED,GAAalB,EAAQmB,GAAU,OAC1B,GAjGA,KAiGIA,GArFF,KAqFqBA,EAAmB,CAC/C,IAAMC,EAASV,EAAOQ,EAAY,GAClCD,EAAUG,GAAUF,EAAa,EACjCA,GAAc,EAAQR,EAAQO,EAASG,SAEvCF,GAAalB,EAAQmB,GAAU,EAWnC,IADA,IAAIE,EAAM,EAAGC,EAAM,EACZX,EArFyD,GAqFxCE,GAAS,CAC/B,IAAIU,EAAMZ,EAtFoD,GAuF9D,OAAQD,EAAOa,IACb,KArIK,EAuIH,OACF,KA7HM,GA8HJR,EAAMJ,EAAUD,EAAOa,EAAM,KAC7BZ,EA7F0D,IA6FxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA3II,EA4IFZ,EAAUD,EAAOa,EAAM,KAAOZ,EAAUD,EAAOa,EAAM,IACrDZ,EAjG0D,IAiGxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA9IK,EA+IHZ,EAAUD,EAAOa,EAAM,KAAOb,EAAOa,EAAM,GAC3CZ,EArG0D,IAqGxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAjJI,EAkJFZ,EAAUD,EAAOa,EAAM,KAAOZ,EAAUD,EAAOa,EAAM,IACrDZ,EAzG0D,IAyGxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KApJK,EAqJHZ,EAAUD,EAAOa,EAAM,KAAOb,EAAOa,EAAM,GAC3CZ,EA7G0D,IA6GxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA1HI,GA2HFZ,EAAUD,EAAOa,EAAM,KAAOZ,EAAUD,EAAOa,EAAM,IACrDZ,EAjH0D,IAiHxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA7HK,GA8HHZ,EAAUD,EAAOa,EAAM,KAAOb,EAAOa,EAAM,GAC3CZ,EArH0D,IAqHxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAhII,GAkIF,GAAY,KADZD,EAAMX,EAAUD,EAAOa,EAAM,KACqB,YAAjCC,MAAM,0BACvBb,EAAUD,EAAOa,EAAM,IAAME,KAAKC,MAAMf,EAAUD,EAAOa,EAAM,IAAMD,GACrEX,EA3H0D,IA2HxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KArIK,GAuIH,GAAY,KADZD,EAAMZ,EAAOa,EAAM,IAC+B,YAAjCC,MAAM,0BACvBb,EAAUD,EAAOa,EAAM,IAAME,KAAKC,MAAMf,EAAUD,EAAOa,EAAM,IAAMD,GACrEX,EAjI0D,IAiIxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA3JI,GA4JFZ,EAAUD,EAAOa,EAAM,IAAMZ,EAAUD,EAAOa,EAAM,IACpDZ,EArI0D,IAqIxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAAKnD,EACHuC,EAAUD,EAAOa,EAAM,IAAMb,EAAOa,EAAM,GAC1CZ,EAzI0D,IAyIxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA3KK,GA4KHZ,EA5I0D,GA4IzCD,EAAOa,EAAM,GAC9B,MACF,KApLK,EAqLHZ,EA/I0D,GA+IzCK,EAAQN,EAAOa,EAAM,IACtC,MACF,KAxLM,EA0LLZ,EAnJ2D,IAmJzC,EAClB,MACD,KAxLM,IAyLJU,EAAMV,EAAUD,EAAOa,EAAM,QAC7BD,EAAMX,EAAUD,EAAOa,EAAM,KAE3BZ,EAzJwD,GAyJvCD,EAAOa,EAAM,GAEhCZ,EA3J0D,IA2JxCX,EAAQU,EAAOa,IAAQ,EAEzC,MACF,KA7LO,IA8LLF,EAAMV,EAAUD,EAAOa,EAAM,QAC7BD,EAAMZ,EAAOa,EAAM,IAEjBZ,EAlKwD,GAkKvCD,EAAOa,EAAM,GAEhCZ,EApK0D,IAoKxCX,EAAQU,EAAOa,IAAQ,EAE1C,MACD,KA5MM,GA6MJF,EAAMV,EAAUD,EAAOa,EAAM,MAC7BD,EAAMX,EAAUD,EAAOa,EAAM,KAE3BZ,EA3KwD,GA2KvCK,EAAQN,EAAOa,EAAM,IAEtCZ,EA7KwD,IA6KtCX,EAAQU,EAAOa,IAAQ,EAE5C,MACA,KApNM,GAqNLF,EAAMV,EAAUD,EAAOa,EAAM,OAC7BD,EAAMX,EAAUD,EAAOa,EAAM,KAE3BZ,EApLwD,GAoLvCA,EAAUD,EAAOa,EAAM,IAExCZ,EAtLwD,IAsLtCX,EAAQU,EAAOa,IAAQ,EAE5C,MACA,KAhNK,IAiNJF,EAAMV,EAAUD,EAAOa,EAAM,MAC7BD,EAAMX,EAAUD,EAAOa,EAAM,KAE3BZ,EA7LwD,GA6LvCK,EAAQN,EAAOa,EAAM,IAEtCZ,EA/LwD,IA+LtCX,EAAQU,EAAOa,IAAQ,EAE3C,MACD,KAxNM,IAyNLF,EAAMV,EAAUD,EAAOa,EAAM,OAC7BD,EAAMX,EAAUD,EAAOa,EAAM,KAE3BZ,EAtMwD,GAsMvCA,EAAUD,EAAOa,EAAM,IAExCZ,EAxMwD,IAwMtCX,EAAQU,EAAOa,IAAQ,EAE5C,MACD,KAzOQ,GA0OR,KAxNS,GAyNPF,EAAMV,EAAUD,EAAOa,EAAM,IAC7BD,EAAMZ,EAAOa,EAAM,IA5Ob,KA6OOb,EAAOa,GAAmBF,IAAQC,EAAMD,IAAQC,GAE3DX,EAjNwD,GAiNvCK,EAAQN,EAAOa,EAAM,IAEtCZ,EAnNwD,IAmNtCX,EAAQU,EAAOa,IAAQ,EAE5C,MACD,KApOI,GAsOF,IAAMI,EAAOV,EAASP,EAAOa,EAAM,SACtBK,IAATD,IACE,oBAAJA,EAAOX,EAAQN,EAAOa,EAAM,KAE9BZ,EAAUD,EAAOa,EAAM,IAAMI,EAC7BhB,EA7N0D,IA6NxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAxPO,IAyPLF,EAAMV,EAAUD,EAAOa,EAAM,QAC7BD,EAAMX,EAAWD,EAAOa,EAAM,KAE5BZ,EAnOwD,GAmOvCK,EAAQN,EAAOa,EAAM,IAEtCZ,EArOwD,IAqOtCX,EAAQU,EAAOa,IAAQ,EAE5C,MACD,KAlQW,GAmQTM,EAAQC,OAAOC,MAAMC,OAAOC,aAAcvB,EAAOa,EAAM,KACvDZ,EA1O0D,IA0OxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAzQU,GA0QR,IAAMW,EAAcxB,EAAOC,EAAWD,EAAOa,EAAI,KACjDY,QAAQC,IAAKJ,OAAOC,aAAcC,IAClCvB,EA/O0D,IA+OxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA7QK,GA8QL,KAlQO,GAoQL,IAAMH,EAASV,EAAOa,EAAM,GAC5BZ,EArP0D,IAqPvC,EAAID,EAAQO,EAASG,IAAa,EACrD,MACF,KA5QK,GA6QHT,EAAUD,EAAOa,EAAI,IAAMb,EAAOC,EAAUD,EAAOa,EAAI,KACvDY,QAAQC,IAAR,eAAoB1B,EAAOC,EAAUD,EAAOa,EAAI,KAAhD,kBAA8Db,EAAOa,EAAI,KACzEZ,EA1P0D,IA0PxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA3QM,GA4QJb,EAAOC,EAAUD,EAAOa,EAAI,KAAOZ,EAAUD,EAAOa,EAAI,IACxDZ,EA9P0D,IA8PxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA7QM,GA8QJb,EAAOC,EAAUD,EAAOa,EAAI,KAAOb,EAAOa,EAAI,GAC9CZ,EAlQ0D,IAkQxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAxRK,GAyRHb,EAAOC,EArQ4C,MAqQxBA,EAAUD,EAAOa,EAAI,IAChDZ,EAtQ0D,IAsQxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KA3RI,GA4RF,IAAMc,EAAa1B,EAzQgC,GAyQf,EACpCA,EAAUD,EAAOa,EAAI,IAAMb,EAAO2B,GAClC1B,EA3QmD,GA2QlC0B,EACjB1B,EA5Q0D,IA4QxCX,EAAQU,EAAOa,IAAQ,EACzC,MACF,KAhSK,GAkSHb,EAAOC,EAhR4C,MAgRxBA,EAhRS,GAkRpCA,EAlRoC,GAkRnBA,EAlRyC,GAkRxBX,EAAQU,EAAOa,IAAQ,EAEzDZ,EApR0D,GAoRzCK,EAAQN,EAAOa,EAAM,IACtC,MACF,KAvSI,GAySF,IAAMe,EAAK3B,EAxRyB,GAyRpCA,EAzRoC,GAyRnBD,IAASC,EAzRyB,IA0RnDA,EA1R0D,GA0RzC2B,EACjB,MACF,KAnSM,GAqSJ3B,EA9R0D,GA8RzCA,EA9RyC,GA8RxBX,EAAQU,EAAOa,IAAQ,EAKzD,IAJA,IAAMgB,EAAuB,YAAO5B,GAGhC6B,EAAa,GACRC,EAAI9B,EAnS+B,GAmSf8B,EAAI9B,EAnSkB,GAmSF8B,IAC/CD,EAAWnC,KAAKK,EAAO+B,IAKzBF,EAzSmD,IAySnBC,EAAWE,OAG3C,IAAK,IAAID,EAAI,EAAGA,EAAIF,EAAwBG,OAAQD,IAClD/B,EAAOC,EA7SmC,GA6SlB8B,GAAKF,EAAwBE,GAKvD,IAAK,IAAIA,EAAI,EAAGA,EAAID,EAAWE,OAAQD,IACrC/B,EAAOC,EAnTmC,GAmTlBA,EAAU+B,OAASD,GAAMD,EAAWC,GAG9D9B,EAtT4C,GAsT3BA,EAtT2B,GAsTVA,EAAU+B,OAC5C/B,EAvTmD,GAuTlCA,EAvTkC,GAuTjBA,EAAU+B,OAE5CF,EAAWG,OAAO,EAAGH,EAAWE,QAGhC/B,EA5T0D,GA4TzCK,EAAQN,EAAOa,EAAM,IACtC,MACF,KApUK,GAwUH,IAHA,IAAMqB,EAAyB,YAAOjC,GAElCkC,EAAU,GACLJ,EAAIG,EAlU+B,GAkUCH,EAAIG,EAlUE,GAkU8BH,IAC/EI,EAAQxC,KAAKK,EAAO+B,IAItB,IAAK,IAAIA,EAAI,EAAGA,EAAIG,EAA0BF,OAAQD,IACpD9B,EAAU8B,GAAK/B,EAAQkC,EAxUmB,GAwUcjC,EAAU+B,OAASD,GAG7EI,EAAQ1C,SAAQ,SAAA2C,GACdpC,EAAOC,EA5U0C,IA4UxBmC,EACzBnC,EA7UiD,QAgVnDkC,EAAQF,OAAO,EAAGE,EAAQH,QAK9B,GAAI5B,EAAS,OAjTCR,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAG,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAAMA,EAAE,KAuUrFyC,UAhBhB,SAAqBrC,GAA4B,IAAD,OAAnBK,EAAmB,uDAAboB,QAAQC,IACzCY,KAAKrC,UAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAC5CqC,KAAKtC,OAASA,EACdsC,KAAKjC,MAAMA,EAEXiC,KAAKC,QAAU,kBAAMxC,EAAS,EAAKC,OAAQ,EAAKC,UAAW,EAAG,EAAKD,OAAOgC,QAAQ,EAAO3B,IACzFiC,KAAKE,YAAc,kBAAMzC,EAAS,EAAKC,OAAQ,EAAKC,UAAW,EAAG,EAAKD,OAAOgC,QAAQ,EAAM3B,IAC5FiC,KAAKG,MAAQ,SAACC,GAAD,OAAS,EAAKzC,UAAW,EAAKzF,cAAL,KAA8BkI,GAEpEJ,KAAKxI,eAAiBA,EACtBwI,KAAK9H,cAAgBA,EACrB8H,KAAK7H,QAAUA,EACf6H,KAAKzF,IAAMA,I,0DCrgBO8F,EAAQ,IAc5B,SAASC,EAAIC,GACT,IAAMC,EAAS,GACXC,EAAU,GACVC,GAAY,EAoBhB,GAlBAH,EAAOI,MAAM,IAAIxD,SAAQ,SAAAG,GAIrB,GAHS,MAALA,IACAoD,GAAY,IAEZA,EACJ,GAAS,KAALpD,EAGG,IAAU,KAALA,GAAiB,MAALA,IAAcmD,EAAQf,OAAS,EAAG,CACtD,IAAIkB,EAAQH,EAAQI,KAAK,IAAIC,OAC7B,IAAKF,EAAO,OACZJ,EAAOnD,KAAKuD,GACZH,EAAU,QACwB,IAA3B,CAAC,KAAM,IAAIM,QAAQzD,IAC1BmD,EAAQpD,KAAKC,QARboD,GAAY,MAYfA,EAAW,CACZ,IAAIE,EAAQH,EAAQI,KAAK,IAAIC,OAC7B,IAAKF,EAAO,OAAOJ,EACnBA,EAAOnD,KAAKuD,GAIhB,OADAzB,QAAQC,IAAIoB,GACLA,EAGX,SAASQ,EAASR,EAAQS,GAAkB,IAATC,EAAQ,uDAAJ,GAC7BC,EAAO,GACbD,EAAIE,OAASZ,EAAOa,QAGpB,IAFA,IAAMC,EAAS,GAAQC,EAAW,EAC9B9B,EAAI,EACDA,EAAIe,EAAOd,QAAQ,CACtB,IAAM8B,EAAQhB,EAAOf,GACfgC,EAAKR,EAAQ1G,IAAIiH,GACvB,QAAW5C,IAAP6C,EACA,MAAM,IAAIC,MAAM,uCAAyCjC,EAAEkC,WAAa,YAAcH,GAE1F,IAAII,EAASX,EAAQ9I,QAAQsJ,GAC7B,GAAoB,SAAhBG,EAAOxJ,KAAiB,CACxB,IAAMgG,EAAQoC,EAAOf,EAAE,GACvB6B,EAAOlD,GAASmD,IAChB,IAAM7B,EAASmC,SAASrB,EAAOf,EAAE,IACjCA,GAAKC,OACF,GAAoB,WAAhBkC,EAAOxJ,KAAmB,CACjC,IAAMgG,EAAQoC,EAAOf,EAAE,GACvB6B,EAAOlD,GAASmD,IAChB,IAAM7B,EAASmC,SAASrB,EAAOf,EAAE,IAC3BqC,EAAMtB,EAAOf,EAAE,GAAGkB,MAAM,IAC9BxB,QAAQC,IAAI0C,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIrC,EAAQqC,IACxBvB,EAAOb,OAAOF,EAAIsC,EAAI,EAAG,EAAGD,EAAIC,GAAGvE,WAAW,IAElDgD,EAAOb,OAAOF,EAAIqC,EAAIpC,OAAS,EAAG,GAGlCwB,EAAIE,OAASZ,EAAOa,QACpB,IAAK,IAAIU,EAAI,EAAGA,EAAIrC,EAAQqC,IACxBb,EAAIE,OAAO3B,EAAIsC,EAAI,GAAKD,EAAIC,GAEhC5C,QAAQC,IAAIoB,GACZf,GAAKC,OACF,GAAmB,SAAfkC,EAAOxJ,KAAiB,CAC/B,IAAMgG,EAAQoC,EAAOf,EAAE,GACvB6B,EAAOlD,GAASmD,SACb,GAAoB,QAAhBK,EAAOxJ,KAAgB,CAC9B,IAAMmJ,EAAWD,EAAOd,EAAOf,EAAE,IACjC,QAAiBb,IAAb2C,EACA,MAAM,IAAIG,MAAM,6BAA+BlB,EAAOf,EAAE,GAAGkC,YAE/DnB,EAAOf,EAAE,GAAK8B,EAElB9B,GAAKmC,EAAOvJ,KAAO,EAMvB,IAJAoH,EAAI,EACJN,QAAQC,IAAIoB,GACZrB,QAAQC,IAAIkC,GAEL7B,EAAIe,EAAOd,QAAQ,CACtB,IAAM8B,EAAQhB,EAAOf,GACfgC,EAAKR,EAAQ1G,IAAIiH,GACvB,QAAW5C,IAAP6C,EACA,MAAM,IAAIC,MAAM,uCAAyCjC,EAAEkC,WAAa,YAAcH,GAG1FL,EAAK9D,KAAKoE,GAGV,IAFA,IAAIG,EAASX,EAAQ9I,QAAQsJ,GACzBM,EAAI,EACDA,IAAMH,EAAOvJ,MAAM,CACtB,GAAIoH,EAAIsC,GAAKvB,EAAOd,OAChB,MAAM,IAAIgC,MAAM,6BAEpB,IAAMM,EAAMxB,EAAOf,EAAIsC,GACjBE,EAAWJ,SAASG,GAS1B,QARmCpD,IAA/BqC,EAAQ/I,cAAc8J,GACtBb,EAAK9D,KAAK4D,EAAQ/I,cAAc8J,IACzBE,MAAMD,SAA6BrD,IAAhB0C,EAAOU,GACjCb,EAAK9D,KAAMiE,EAAOU,IAElBb,EAAK9D,KAAMwE,SAASG,IAGpBJ,EAAO5I,QAAU+I,IAAMH,EAAOvJ,KAAM,CAGpC,IADA,IAAM8J,EAAahB,EAAKA,EAAKzB,OAAO,GAC3BtC,EAAI,EAAGA,GAAK+E,EAAY/E,IAAK,CAClC,IAAMgF,EAAS5B,EAAOf,EAAIsC,EAAK3E,GAC/B+D,EAAK9D,KAAKwE,SAASO,IAEvB3C,GAAK0C,GAGb1C,GAAKmC,EAAOvJ,KAAO,EAGvB,OADA8G,QAAQC,IAAIkC,GACLH,EAGX,SAASkB,EAAQ3E,EAASiB,EAAM2D,GAC5B,GAAI3D,EAAO2D,EAAS5C,OAAShC,EAAOgC,OAChC,MAAM,IAAIgC,MAAJ,oCAAuChE,EAAOgC,OAA9C,qBAAiEf,IAG3E,OADA2D,EAASnF,SAAQ,SAACoF,EAAG9C,GAAJ,OAAU/B,EAAOiB,EAAOc,GAAK8C,KACvC7E,EAwBX8E,EAAOC,QARU,SAASxB,EAASV,GAAuB,IAAfmC,EAAc,uDAAH,EAC5ClC,EAASF,EAAIC,GACfW,EAAM,GACJyB,EAAM3B,EAASR,EAAQS,EAASC,GAEtC,OADAmB,EAAQpB,EAAQvD,OAAQgF,EAAYC,GAC7BzB,EAAIE,S,mOCzJTwB,EAAWvC,EAAQ,IAMnBwC,EACU,gBADVA,EAGgB,QAHhBA,EAIU,WAJVA,EAKU,MAoPDC,E,kDAhPX,WAAYC,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAMrF,EAAS,IAAIsF,MAAM,MAAMC,KAAK,GAFrB,OAGf,EAAKhC,QAAU,IAAIlB,UAAYrC,EAAQc,OACvC,EAAK0E,kBAAoB,IACzB,EAAKC,eAAiB,GACtB,EAAKC,MAAQ,CACT1F,OAAQA,EACR2F,oBAAqB,EACrB1F,UAAW,EAAKsD,QAAQtD,UACxB4C,OAAQ,GACR+C,QAAS,GACTC,SAAU,EACVC,aAAc,GACdC,eAAe,EACfC,UAAW,GAfA,E,mDAoBZ/E,EAAMyB,GACTA,EAAMyB,SAASzB,GACX8B,MAAM9B,KAAQA,EAAM,GACxBJ,KAAKiB,QAAQvD,OAAOiB,GAAQyB,EAC5BJ,KAAK2D,SAAS,CAAEjG,OAAQsC,KAAKiB,QAAQvD,OAAQ+F,eAAe,M,6BAGzDG,EAAKxD,GACRA,EAAMyB,SAASzB,GACX8B,MAAM9B,KAAQA,EAAM,GACxBJ,KAAKiB,QAAQtD,UAAUiG,GAAOxD,EAC9BJ,KAAK2D,SAAS,CAAEhG,UAAWqC,KAAKiB,QAAQtD,c,kCAGhCyC,GACRA,EAAMyB,SAASzB,IACX8B,MAAM9B,IAAQA,GAAOJ,KAAKiB,QAAQvD,OAAOgC,UAAUU,EAAM,GAE7DJ,KAAK2D,SAAS,CAAEJ,SAAUnD,EAAKqD,eAAe,M,4BAI9CzD,KAAKiB,QAAQhB,UACbD,KAAK2D,SAAS,CAAEhG,UAAWqC,KAAKiB,QAAQtD,UAAWD,OAAQsC,KAAKiB,QAAQvD,W,6BAIxEsC,KAAKiB,QAAQf,cACbF,KAAK2D,SAAS,CAAEhG,UAAWqC,KAAKiB,QAAQtD,UAAWD,OAAQsC,KAAKiB,QAAQvD,W,kCAGhE0C,GACRA,EAAMyB,SAASzB,GACX8B,MAAM9B,IACNA,EAAM,GAAKA,GAAOJ,KAAKiB,QAAQvD,OAAOgC,QAC1CM,KAAK2D,SAAS,CAAEN,oBAAqBjD,M,kCAG7ByD,GACR7D,KAAK2D,SAAS,CAAEL,QAASO,M,iCAIzB,IAAIrD,EAAS,GACb,IACIA,EAASoC,EAAS5C,KAAKiB,QAASjB,KAAKoD,MAAME,QAAStD,KAAKoD,MAAMG,UAC/DvD,KAAKiB,QAAQtD,UAAUqC,KAAKiB,QAAQ/I,cAAb,MAAsC8H,KAAKoD,MAAMG,UAAY,GAAK/C,EAAOd,OAAS,EACzGM,KAAKiB,QAAQtD,UAAUqC,KAAKiB,QAAQ/I,cAAb,KAAqC8H,KAAKiB,QAAQtD,UAAUqC,KAAKiB,QAAQ/I,cAAb,KACnFiH,QAAQC,IAAIY,KAAKoD,MAAMzF,WACvBqC,KAAK2D,SAAS,CAAEhG,UAAWqC,KAAKiB,QAAQtD,UAAWD,OAAQsC,KAAKiB,QAAQvD,OAAQ8F,aAAchD,EAAQiD,eAAe,IAEvH,MAAOI,GACLrF,MAAMqF,GACN7D,KAAK2D,SAAS,CAAEhG,UAAWqC,KAAKiB,QAAQtD,UAAWD,OAAQsC,KAAKiB,QAAQvD,OAAQ8F,aAAc,GAAIC,eAAe,O,gCAMrH,IAAIK,EAAU9D,KAAKoD,MAAMC,oBAAsBrD,KAAKkD,kBAChDY,EAAU,IAAGA,EAAU,GAC3B9D,KAAK2D,SAAS,CAAEN,oBAAqBS,M,gCAKrC,IAAMA,EAAU9D,KAAKoD,MAAMC,oBAAsBrD,KAAKkD,kBAClDY,GAAW9D,KAAKiB,QAAQvD,OAAOgC,QACnCM,KAAK2D,SAAS,CAAEN,oBAAqBS,M,wCAMrC,IADA,IAAMC,EAAS,GACf,MAA2B9G,OAAO+G,QAAQhE,KAAKiB,QAAQ9I,SAAvD,eAAiE,CAAC,IAAD,sBAArDgJ,EAAqD,KAA/C8C,EAA+C,KAC7DF,EAAO1G,KAAK,CAAEjF,KAAM6L,EAAK7L,KAAM+F,OAAQgD,EAAM7I,KAAM2L,EAAK3L,OAE5D,OAAOyL,I,+BAGD,IAAD,OACCG,EAAQlE,KAAKoD,MAAM1F,OAAO2D,MAAMrB,KAAKoD,MAAMC,oBAC7CrD,KAAKoD,MAAMC,oBAAsBrD,KAAKkD,mBACpCiB,EAAW,GACXC,EAAcpE,KAAKoD,MAAMzF,UAAUqC,KAAKiB,QAAQ/I,cAAcmM,KAAOrE,KAAKoD,MAAMC,oBAChFiB,EAActE,KAAKoD,MAAMzF,UAAUqC,KAAKiB,QAAQ/I,cAAcqM,KAAOvE,KAAKoD,MAAMC,oBAChFmB,EAAcxE,KAAKoD,MAAMzF,UAAUqC,KAAKiB,QAAQ/I,cAAcuM,KAAOzE,KAAKoD,MAAMC,oBAwCtF,OAvCAa,EAAM/G,SAAQ,SAACuH,EAAGjF,GACd,GAAIA,EAAI,EAAK0D,iBAAmB,EAAhC,CAEA,IADA,IAAIwB,EAAO,GACFlF,EAAI,EAAGA,EAAI,EAAK0D,eAAgB1D,IAAOkF,EAAKtH,KAAKoC,GAC1D0E,EAAS9G,KACL,+BACI,oBAAIuH,MAAO,CAAEC,gBAAiBhC,GAA9B,SAA0D,EAAKO,MAAMC,oBAAsB5D,IAC1FkF,EAAKG,KACF,SAAAC,GACI,IAAMpG,EAAOc,EAAIsF,EAIXC,EAHQZ,IAAgBzF,EAGJkE,EAFZyB,IAAgB3F,EAEyBkE,EADzC2B,IAAgB7F,EACsDkE,EAAoB,GAClGoC,EAAetG,EAAO,EAAKyE,MAAMC,oBACjC6B,EAAkB,EAAK9B,MAAMK,eAC5BwB,GAAgB,EAAK7B,MAAMG,UAC3B0B,EAAgB,EAAK7B,MAAMG,SAAW,EAAKH,MAAMI,aAAa9D,OAGrE,OAAO,qBACHkF,MAAO,CAAEC,gBAAiBG,EAAWG,SAAU,UAD5C,UAEFD,EAAkB,qBAAKE,MAAM,SAAX,SAAqB,EAAKhC,MAAMI,aAAayB,EAAe,EAAK7B,MAAMG,YAAmB,GAC7G,uBACI8B,KAAK,OACLT,MAAO,CACHU,MAAO,OAAQC,OAAQ,OACvBV,gBAAiBG,GAErBQ,SAAU,SAAA3B,GAAC,OAAI,EAAK4B,OAAOhG,EAAIsF,EAAQlB,EAAE6B,OAAOC,QAChDA,MAAOzB,EAAMzE,EAAIsF,GACjBa,SAAUnG,EAAIsF,EAAS,EAAK3B,MAAMC,qBAAuB,EAAKD,MAAM1F,OAAOgC,SAX5E,oBAAgBD,EAAIsF,eAmBxC,sBAAKc,UAAU,aAAf,eACH,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKnB,MAAO,CAAEoB,UAAW,UAAzB,UACI,eAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,cAACH,EAAA,EAAD,UAAK,cAACE,EAAA,EAAD,CAAKrB,MAAO,CAAEuB,aAAc,QAA5B,SAAsC,wCAC3C,cAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,YAAU,EAACC,KAAK,KAAhC,SACI,gCACKvG,KAAKoD,MAAMzF,UAAUmH,KAAI,SAACa,EAAOlG,GAC9B,IAAM+G,EAA2C,QAAnC,EAAKvF,QAAQzJ,eAAeiI,GACpCgH,EAA2C,QAAnC,EAAKxF,QAAQzJ,eAAeiI,GACpCiH,EAA2C,QAAnC,EAAKzF,QAAQzJ,eAAeiI,GACpCuF,EAAYwB,EAAQ3D,EAAqB4D,EAAQ5D,EAAqB6D,EAAQ7D,EAAoB,GACxG,OAAO,+BACH,oBAAI+B,MAAO,CAAEC,gBAAiBhC,GAA9B,SAA0D,EAAK5B,QAAQzJ,eAAeiI,KACtF,oBAAqBmF,MAAO,CAAEC,gBAAiBG,GAA/C,SACI,uBAAOK,KAAK,OACRT,MAAO,CAAEU,MAAO,OAAQC,OAAQ,OAAQV,gBAAiBG,GACzDW,MAAOA,EACPH,SAAU,SAAA3B,GAAC,OAAI,EAAK8C,OAAOlH,EAAGoE,EAAE6B,OAAOC,WAJ/C,cAAgBlG,cAShC,cAACsG,EAAA,EAAD,UACI,eAACE,EAAA,EAAD,WACI,cAACW,EAAA,EAAD,CAAQC,QAAQ,QAAQC,QAAS,kBAAM,EAAKC,OAA5C,iBACA,cAACH,EAAA,EAAD,CAAQhC,MAAO,CAAEoC,WAAY,OAASH,QAAQ,QAAQC,QAAS,kBAAM,EAAKG,QAA1E,0BAIZ,cAAChB,EAAA,EAAD,CAAKC,GAAI,GAAT,SACI,eAACD,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,cAACH,EAAA,EAAD,UAAK,cAACE,EAAA,EAAD,CAAKrB,MAAO,CAAEuB,aAAc,QAA5B,SAAsC,2CAC3C,cAACC,EAAA,EAAD,CAAOC,UAAQ,EAACC,YAAU,EAACC,KAAK,KAAhC,SACI,gCACKpC,MAGT,eAAC4B,EAAA,EAAD,CAAKnB,MAAO,CAAEuB,aAAc,MAAOa,WAAY,OAA/C,UACI,eAACJ,EAAA,EAAD,CAAQC,QAAQ,QAAQC,QAAS,kBAAM,EAAKI,WAA5C,cAAyD,IAAzD,OACA,eAACN,EAAA,EAAD,CAAQhC,MAAO,CAAEoC,WAAY,OAASH,QAAQ,QAAQC,QAAS,kBAAM,EAAKK,WAA1E,cAAuF,IAAvF,OACA,uBAAO9B,KAAK,OAAOT,MAAO,CAAEW,OAAQ,sBAAuByB,WAAY,OAAQI,YAAa,QAAU5B,SAAU,SAAC3B,GAAD,OAAO,EAAKwD,YAAYxD,EAAE6B,OAAOC,QAAQ2B,YAAY,6BAMrL,uBAEA,eAACvB,EAAA,EAAD,CAAKnB,MAAO,CAAEoB,UAAW,SAAUuB,UAAW,QAA9C,UACI,eAACtB,EAAA,EAAD,CAAKuB,GAAI,EAAT,UACI,cAACzB,EAAA,EAAD,UAAK,cAACE,EAAA,EAAD,CAAKrB,MAAO,CAAEuB,aAAc,QAA5B,SAAsC,8CAC3C,cAACJ,EAAA,EAAD,UACI,0BAAUuB,YAAY,kBAClB1C,MAAO,CAAEU,MAAO,OAAQmC,OAAQ,OAAQC,UAAW,QAASN,YAAa,OAAQO,YAAa,aAC9FhC,MAAO3F,KAAKoD,MAAME,QAClBkC,SAAU,SAAA3B,GAAC,OAAI,EAAK+D,YAAY/D,EAAE6B,OAAOC,YAEjD,cAACI,EAAA,EAAD,UACI,cAACE,EAAA,EAAD,CAAKuB,GAAI,GAAT,SACI,eAACK,EAAA,EAAD,CAAYjD,MAAO,CAAE2C,UAAW,OAAhC,UACI,cAACO,EAAA,EAAD,CACItC,SAAU,SAAC3B,GAAD,OAAO,EAAKkE,YAAYlE,EAAE6B,OAAOC,QAC3C2B,YAAY,6CAEhB,cAACO,EAAA,EAAWG,OAAZ,UACI,cAACpB,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,kBAAM,EAAK9F,YAA3C,8BAQpB,eAACiF,EAAA,EAAD,CAAKuB,GAAI,EAAT,UACI,cAACzB,EAAA,EAAD,UAAK,cAACE,EAAA,EAAD,CAAKrB,MAAO,CAAEuB,aAAc,QAA5B,SAAsC,oDAC3C,cAACJ,EAAA,EAAD,UACI,eAACE,EAAA,EAAD,CAAKuB,GAAI,GAAI5C,MAAO,CAAEqD,UAAW,UAAjC,UACI,6BACKjI,KAAKkI,kBAAkBpD,KAAI,SAACqD,EAAO1I,GAAR,OAAc,oBAAGqH,QAAS,kBAAI,EAAKnD,SAAS,CAACD,SAAUjE,KAAzC,UAA8C,cAAC2I,EAAA,EAAD,CAAOC,MAAI,EAACxB,QAAS,EAAKzD,MAAMM,WAAajE,EAAI,UAAY,QAA7D,SAAuE0I,EAAM/P,OAAc,YAEvL,wBAC2B,IAAzB4H,KAAKoD,MAAMM,SAAkB,GAAK1D,KAAKkI,kBAAkBlI,KAAKoD,MAAMM,UAAUpL,0B,GArOjFgQ,IAAMC,W,MCZtBC,MATf,WACE,OACE,sBAAK3C,UAAU,MAAf,UACE,uBAAK,uBACD,cAAC,EAAD,QCIK4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00fd0c24.chunk.js","sourcesContent":["const REGISTER_NAMES = {\n  0 : 'R0',\n  1 : 'R1',\n  2 : 'R2',\n  3 : 'R3',\n  4 : 'R4',\n  5 : 'RRA',\n  6 : 'RBP',\n  7 : 'RSP',\n  8 : 'RIP',\n};\n\nconst REGISTER_NUMS = {\n  'R0' : 0,\n  'R1' : 1,\n  'R2' : 2,\n  'R3' : 3,\n  'R4' : 4,\n  'RRA': 5,\n  'RBP' : 6,\n  'RSP' : 7,\n  'RIP' : 8,\n};\n\nconst OPCODES = {\n  0: { name: 'HALT', args: 0, desc: 'Args: none  -  Stops execution of the program here. Does not advance IP' },\n  1: { name: 'ADD', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 + Reg2' },\n  2: { name: 'ADDI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg + Immediate' },\n  3: { name: 'SUB', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 - Reg2'  },\n  4: { name: 'SUBI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg - Immediate' },\n  5: { name: 'ASSERT', args: 1 , desc: '' },\n  6: { name: 'LABEL', args: 1 , desc: 'Args: <name>  -  Creates a label with gives name, pointing to next instruction' },\n  7: { name: 'JMPL', args: 1 , desc: '' },\n  8: { name: 'JMPGT', args: 3 , desc: '' },\n  9: { name: 'JMPGTE', args: 3 , desc: '' },\n  10: { name: 'JMPEQ', args: 2 , desc: '' },\n  11: { name: 'PRINT', args: 1 , desc: '' },\n  12: { name: 'SETI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Immediate' },\n  13: { name: 'JMPI', args: 1 , desc: '' },\n  14: { name: 'JMPEQI', args: 3 , desc: '' },\n  15: { name: 'JMPEQIL', args: 3 , desc: 'Args: <Reg> <Immediate> <Label>  -  If value of Reg equals Immediate, jump to Label' },\n  16: { name: 'PRINTBYTE', args: 1 , desc: '' },\n  17: { name: 'DATA', args: 2, varLen: true , desc: '' },\n  18: { name: 'PRINTSTRL', args: 1 , desc: '' },\n  19: { name: 'PRINTBYTEI', args: 1 , desc: '' },\n  20: { name: 'JMPEQL', args: 3 , desc: '' },\n  21: { name: 'SET', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets value Reg1 to the value of Reg2' },\n  22: { name: 'JMPLT', args: 3 , desc: '' },\n  23: { name: 'JMPLTE', args: 3 , desc: '' },\n  24: { name: 'LOAD', args: 2 , desc: 'Args: <Reg1> <Reg2> - Load byte at address held in Reg2 into Reg1' },\n  25: { name: 'PUSH', args: 1 , desc: 'Args: <Reg> - Pushes the value of Reg to the top of the stack (RSP) and increments RSP' },\n  26: { name: 'POP', args: 1 , desc: 'Args: <Reg>  - Places the value on top of the stack (RSP-1) into Reg and decrements RSP' },\n  27: { name: 'CALL', args: 1 , desc: 'Args: <Label>  -  Pushes RRA onto the stack, sets RRA to next instruction, and jumps to Label' },\n  28: { name: 'RET', args: 0 , desc: 'Args: None  -  Returns control to the instruction at address RRA. Restores RRA to previous RRA value, which is expected to be on top of the stack (RSP-1)' },\n  29: { name: 'CHDATA', args: 2, varLen: true , desc: '' },\n  30: { name: 'STORE', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Stores value of Reg1 at address held in Reg2' },\n  31: { name: 'AOL', args: 2 , desc: 'Args: <Label> <Register>  -  Address-of-label instruction. Sets Register to address Label refers to' },\n  32: { name: 'STORI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Stores Immediate value at address held in Reg' },\n  33: { name: 'JMPNEQIL', args: 3 , desc: 'Args: <Reg> <Immediate> <Label>  -  If value of Reg does not equal Immediate, jump to Label' },\n  34: { name: 'MUL', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 * Reg2' },\n  35: { name: 'MULI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg * Immediate' },\n  36: { name: 'DIV', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 / Reg2'  },\n  37: { name: 'DIVI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg / Immediate' },\n  38: { name: 'PCALL', args: 1 , desc: 'Preserved call' },\n  39: { name: 'PRET', args: 0 , desc: 'Preserved ret' },\n\n\n};\n\nconst OPS = {\n  HALT : 0,\n  ADD : 1,\n  ADDI : 2,\n  SUB : 3,\n  SUBI : 4,\n  ASSERT : 5,\n  LABEL : 6,\n  JMPL : 7,\n  JMPGT : 8,\n  JMPGTE : 9,\n  JMPEQ : 10,\n  PRINT : 11,\n  SETI   : 12,\n  JMPI : 13,\n  JMPEQI : 14,\n  JMPEQIL : 15,\n  PRINTBYTE : 16,\n  DATA : 17, // DATA HELLOWORLD SIZE  'H' 'E'\n  PRINTSTRL : 18, // Print a string at a label\n  PRINTBYTEI : 19,\n  JMPEQL : 20,\n  SET : 21,\n  JMPLT: 22,\n  JMPLTE : 23,\n  LOAD: 24,\n  PUSH : 25,\n  POP : 26,\n  CALL : 27,\n  RET : 28,\n  CHDATA : 29,\n  STORE : 30,\n  AOL : 31,\n  STORI : 32,\n  JMPNEQIL: 33,\n  MUL : 34,\n  MULI : 35, \n  DIV : 36,\n  DIVI : 37,\n  PCALL : 38,\n  PRET : 39,\n};\n\nconst\n    HALT = 0,\n    ADD = 1,\n    ADDI = 2,\n    SUB = 3,\n    SUBI = 4,\n    ASSERT = 5,\n    LABEL = 6,\n    JMPL = 7,\n    JMPGT = 8,\n    JMPGTE = 9,\n    JMPEQ = 10,\n    PRINT = 11,\n    SETI   = 12,\n    JMPI = 13,\n    JMPEQI = 14,\n    JMPEQIL = 15,\n    PRINTBYTE = 16,\n    DATA = 17, // DATA HELLOWORLD SIZE  'H' 'E'\n    PRINTSTRL = 18, // Print a string at a label\n    PRINTBYTEI = 19,\n    JMPEQL = 20,\n    SET = 21,\n    JMPLT = 22,\n    JMPLTE = 23,\n    LOAD = 24,\n    PUSH = 25,\n    POP = 26,\n    CALL = 27,\n    RET = 28,\n    CHDATA = 29,\n    STORE = 30,\n    AOL = 31,\n    STORI = 32, \n    JMPNEQIL = 33,\n    MUL = 34,\n    MULI = 35, \n    DIV = 36,\n    DIVI = 37,\n    PCALL = 38,\n    PRET = 39;\n\nconst numArgs = [];\nObject.keys(OPCODES).forEach(k => numArgs.push(OPCODES[k].args));\n\nconst registers = [0, 0, 0, 0, 0, 0, 0, 0];\nconst R0 = 0, R1 = 1, R2=2, R3=3, R4=4, RRA=5, RBP= 6, RSP=7, RIP=8;\n\n\nlet memory = [\n  SETI, R1, 1, JMPI, 8, ADDI, R1, 5, ADDI, R1, 8, PRINT, R1, LABEL, 'ADD3MORE', ADDI, R1, 3, PRINT, R1\n];\n\n// Print numbers 1 to 55\nmemory = [\n  SETI, R0, 0, LABEL, \"INCRANDPRINT\", ADDI, R0, 1, PRINT, R0, JMPEQIL, R0, 55, /*label=*/\"DONE\", JMPL, \"INCRANDPRINT\", LABEL, \"DONE\"\n];\n\n// Print sum of all numbers from 1 to 10\n// R0 is total, R1 is loop var\n// total = 0 ; number we're currently adding = 1\n// add NWCA to total\n// add 1 to NWCA\n// if MWCA = 11, we're done.\n// otherwise, go back to step 2\n// remmeber this outline, because we will revisit this\nmemory = [\n  SETI, R0, 0,\n  SETI, R1, 1,\n  LABEL, \"ADDANDINCR\",\n  ADD, R0, R1,\n  ADDI, R1, 1,\n  JMPEQIL, R1, 11, \"PRINTRES\",\n  JMPL, \"ADDANDINCR\",\n  LABEL, \"PRINTRES\",\n  PRINT, R0\n];\n\n\n// Let's try a hello world\nconst c =  char =>  char.charCodeAt(0);\nmemory = [\n  DATA, \"HW\", 11, c('H'), c('e'), c('l'), c('l'), c ('o'), c(' '), c('W'), c('o'), c('r'), c('l'), c('d'),\n  SETI, R0, 11, // Length of str\n  SETI, R1, 0,  // Curr idx in str\n  SETI, R2, 3,  // Address of start of string \n  LABEL, \"PRINTCHAR\",\n  SET, R3, R2, // R3 is a temp we used to calculate start of string + curr index\n  ADD, R3, R1,\n  PRINTBYTE, R3,\n  ADDI, R1, 1,\n  JMPEQL, R1, R0, \"DONE\",\n  JMPL, \"PRINTCHAR\",\n  LABEL, \"DONE\",\n  \n];\n\n// total = 0\n// current_num = 1\n// while (current_num < 11) { total = total + current_num; current_num = current_num + 1; }\n\n\nfunction _execute(memory, registers, codeStart, codeEnd, oneStep, print) {\n  // console.log(memory)\n\n  // Find labels and static data in the code\n  const _labels = {};\n  const _statics = {};\n  let currInstr = codeStart;\n  while (currInstr < codeEnd) {\n    const opCode = memory[currInstr];\n    // console.log(opCode);\n    if (opCode === LABEL) {\n      _labels[ memory[currInstr + 1] ] = currInstr + numArgs[opCode] + 1;\n      currInstr += numArgs[opCode] + 1;\n    } else if (opCode === DATA || opCode === CHDATA) {\n      const label =  memory[currInstr + 1]; \n      _statics[ label ] = currInstr  + 2; // label points to the size byte\n      currInstr +=  1 + 2 + memory[ _statics[label] ] ;\n    } else {\n      currInstr += numArgs[opCode] + 1;\n    }\n  }\n  // console.log(_statics);\n  // if (!oneStep && _labels['start'] !== undefined) {\n  //   registers[RIP] = _labels['start'];\n  // }\n\n  // Execute\n  // console.log(\"Executing...\");\n  let lhs = 0, rhs = 0; // Utility vars\n  while (registers[RIP] < codeEnd) {\n    var rip = registers[RIP];\n    switch (memory[rip]) {\n      case HALT:\n        // registers[RIP] += numArgs[memory[rip]] + 1;\n        return;\n      case PRINT:\n        print(registers[memory[rip + 1]]);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADD: // Adds two registers\n        registers[memory[rip + 1]] += registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADDI:\n        registers[memory[rip + 1]] += memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUB: \n        registers[memory[rip + 1]] -= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUBI:\n        registers[memory[rip + 1]] -= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MUL: \n        registers[memory[rip + 1]] *= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MULI:\n        registers[memory[rip + 1]] *= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIV: \n        rhs = registers[memory[rip + 2]];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIVI:\n        rhs = memory[rip + 2];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SET:\n        registers[memory[rip + 1]] = registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SETI:\n        registers[memory[rip + 1]] = memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPI:\n        registers[RIP] = memory[rip + 1];\n        break;\n      case JMPL:\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case LABEL:\n        // noop\n       registers[RIP] += 2;\n       break;\n      case JMPEQ:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n      case JMPEQI:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPGT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs > rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPGTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs >= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPLT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs < rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n       case JMPLTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs <= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPEQIL:\n      case JMPNEQIL:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        let truthy = memory[rip] === JMPEQIL ? lhs === rhs : lhs !== rhs;\n        if (truthy) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case AOL:  // AOL label register\n        // Puts the address of label label in register\n        const addr = _statics[memory[rip + 1]];\n        if (addr === undefined) {\n          addr = _labels[memory[rip + 1]];\n        } // TODO: labels and statics can be one case\n        registers[memory[rip + 2]] = addr;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPEQL:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[ memory[rip + 2] ];\n        if (lhs === rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case PRINTBYTEI:\n        process.stdout.write(String.fromCharCode( memory[rip + 1]  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PRINTBYTE:\n        const byteToPrint = memory[registers[ memory[rip+1] ] ]; // Arg is a register contaiing address of byte to print\n        console.log( String.fromCharCode( byteToPrint  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DATA:\n      case CHDATA:\n        // Noop\n        const label =  memory[rip + 1]; \n        registers[RIP] +=  2 + memory[ _statics[label] ]  +  1 ; // label, size, num of chars, +1 offset\n        break;\n      case LOAD:\n        registers[memory[rip+1]] = memory[registers[memory[rip+2]]];\n        console.log(`Load ${memory[registers[memory[rip+2]]]} into R${memory[rip+1]}`);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORE: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORI: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = memory[rip+1];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PUSH:\n        memory[registers[RSP]++] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case POP:\n        const topOfStack = registers[RSP] - 1;\n        registers[memory[rip+1]] = memory[topOfStack];\n        registers[RSP] = topOfStack;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case CALL:\n        // First push RRA to stack\n        memory[registers[RSP]++] = registers[RRA];\n        // Write addr of next instruction to RRA\n        registers[RRA] = registers[RIP] + numArgs[memory[rip]] + 1;\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case RET:\n        // Pop stack RA into RRA, then jump there\n        const ra = registers[RRA];\n        registers[RRA] = memory[--registers[RSP]];\n        registers[RIP] = ra;\n        break;\n      case PCALL:\n        // Write addr of next instruction to RIP - we'll preserve this\n        registers[RIP] = registers[RIP] + numArgs[memory[rip]] + 1;\n        const registerStateAtCallTime = [...registers];\n\n        // Everything between [RBP and RSP) is an arg\n        let pcall_args = [];\n        for (let i = registers[RBP]; i < registers[RSP]; i++) {\n          pcall_args.push(memory[i]);\n        }\n\n        // This is important because when we restore RSP, we don't how how many args were provided for the call.\n        // Setting it 'minus args' here will let us simply increment by the number of return values in PRET.\n        registerStateAtCallTime[RSP] -= pcall_args.length;\n\n        // Preserve registers\n        for (let i = 0; i < registerStateAtCallTime.length; i++) {\n          memory[registers[RBP] + i] = registerStateAtCallTime[i];\n        }\n\n        // BP is where first arg sits\n        // Put args on top\n        for (let i = 0; i < pcall_args.length; i++) {\n          memory[registers[RBP] + registers.length + i ] = pcall_args[i];\n        }\n\n        registers[RBP] = registers[RBP] + registers.length;\n        registers[RSP] = registers[RSP] + registers.length;\n\n        pcall_args.splice(0, pcall_args.length);\n\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case PRET:\n        const registerStateAtReturnTime = [...registers];\n        // Gather retvals\n        let retVals = [];\n        for (let i = registerStateAtReturnTime[RBP]; i < registerStateAtReturnTime[RSP]; i++) {\n          retVals.push(memory[i]);\n        }\n\n        // Restore regs\n        for (let i = 0; i < registerStateAtReturnTime.length; i++) {\n          registers[i] = memory[ registerStateAtReturnTime[RBP] - registers.length + i ];\n        }\n        // Push retvals and adjust SP\n        retVals.forEach(v => {\n          memory[registers[RSP]] = v;\n          registers[RSP]++;\n        });\n\n        retVals.splice(0, retVals.length);\n\n        break;\n    }\n\n    if (oneStep) break;\n  } \n}\n\n// execute(0, memory.length);\n\nfunction CuteMachine(memory, print=console.log) {\n  this.registers = [0, 0, 0, 0, 0, 0, 64, 64, 0];\n  this.memory = memory;\n  this.print=print;\n\n  this.execute = () => _execute(this.memory, this.registers, 0, this.memory.length, false, print);\n  this.executeStep = () => _execute(this.memory, this.registers, 0, this.memory.length, true, print);\n  this.setIp = (val) => this.registers[ this.REGISTER_NUMS['RIP'] ] = val;\n\n  this.REGISTER_NAMES = REGISTER_NAMES;\n  this.REGISTER_NUMS = REGISTER_NUMS;\n  this.OPCODES = OPCODES;\n  this.OPS = OPS;\n\n};\n\nexport default  CuteMachine;\n","const CuteMachine = require('./cute');\n\n// const memory = [];\n// const machine = new CuteMachine(memory);\n\n// memory.push(machine.OPS.PRINT, machine.REGISTER_NUMS.RIP);\n// memory.push(machine.OPS.PRINT, machine.REGISTER_NUMS.RIP);\n\n// var source = `\n//     SETI R0 4 # Comment\n//     # More comments\n//     PRINT R0\n// `;\n\nfunction lex(source) {\n    const tokens = [];\n    let currTok = [];\n    let inComment = false;\n\n    source.split('').forEach(c => {\n        if (c == '\\n') {\n            inComment = false;\n        }\n        if (inComment) { return; }\n        if (c == '#') {\n            inComment = true;\n            return;\n        } else if ((c == ' ' || c == '\\n') && currTok.length > 0) {\n            var token = currTok.join('').trim();\n            if (!token) return;\n            tokens.push(token);\n            currTok = [];\n        } else if (['\\t', ''].indexOf(c) === -1) {\n            currTok.push(c);\n        }\n    });\n\n    if (!inComment) {\n        var token = currTok.join('').trim();\n        if (!token) return tokens;\n        tokens.push(token);\n    }\n\n    console.log(tokens);\n    return tokens;\n}\n\nfunction assemble(tokens, machine, out={}) {\n    const code = [];\n    out.disasm = tokens.slice();\n    const labels = {}; let labelNum = 1;\n    let i = 0;\n    while (i < tokens.length) {\n        const opStr = tokens[i];\n        const op = machine.OPS[opStr];\n        if (op === undefined) {\n            throw new Error(\"Parsing error. Expected op at index \" + i.toString() + \" but got \" + opStr);\n        }\n        let opMeta = machine.OPCODES[op];\n        if (opMeta.name === \"DATA\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n            const length = parseInt(tokens[i+2]);\n            i += length;\n        } else if (opMeta.name === \"CHDATA\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n            const length = parseInt(tokens[i+2]);\n            const str = tokens[i+3].split('');  // TODO: Do we really need size here?? Can be implicit.\n            console.log(str)\n            for (let j = 0; j < length; j++) {\n                tokens.splice(i + j + 3, 0, str[j].charCodeAt(0));\n            }\n            tokens.splice(i + str.length + 3, 1);\n\n            // Keep original chars in disassembly\n            out.disasm = tokens.slice();\n            for (let j = 0; j < length; j++) {\n                out.disasm[i + j + 3] = str[j];\n            }\n            console.log(tokens)\n            i += length;\n        } else if (opMeta.name == \"LABEL\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n        } else if (opMeta.name === \"AOL\") {\n            const labelNum = labels[tokens[i+1]];\n            if (labelNum === undefined) {\n                throw new Error('Usage of undefined label: ' + tokens[i+2].toString());\n            }\n            tokens[i+1] = labelNum;\n        }\n        i += opMeta.args + 1;\n    }\n    i = 0;\n    console.log(tokens);\n    console.log(labels)\n\n    while (i < tokens.length) {\n        const opStr = tokens[i];\n        const op = machine.OPS[opStr];\n        if (op === undefined) {\n            throw new Error(\"Parsing error. Expected op at index \" + i.toString() + \" but got \" + opStr);\n        }\n\n        code.push(op);\n        let opMeta = machine.OPCODES[op];\n        let j = 0;\n        while (j++ < opMeta.args) {\n            if (i + j >= tokens.length) {\n                throw new Error(\"Parse runs past code area\");\n            }\n            const arg = tokens[i + j];\n            const argAsInt = parseInt(arg);\n            if (machine.REGISTER_NUMS[arg] !== undefined) {\n                code.push(machine.REGISTER_NUMS[arg]);\n            } else if (isNaN(argAsInt) && labels[arg] !== undefined) { // labels cannot start w a number\n                code.push( labels[arg] );\n            } else {\n                code.push( parseInt(arg) );\n            }\n\n            if (opMeta.varLen && j === opMeta.args) {\n                // Fixed args parsed - last one is number of true args which we parse now\n                const numVarArgs = code[code.length-1];\n                for (let k = 1; k <= numVarArgs; k++) {\n                    const varArg = tokens[i + j  + k];\n                    code.push(parseInt(varArg));\n                }\n                i += numVarArgs;\n            }\n        }\n        i += opMeta.args + 1;\n    }\n    console.log(labels);\n    return code;\n}\n\nfunction memLoad(memory , addr, contents) {\n    if (addr + contents.length > memory.length) {\n        throw new Error(`Not enough memory to load ${memory.length} bytes at ${addr}`)\n    }\n    contents.forEach((b, i) => memory[addr + i] = b);\n    return memory;\n}\n\nfunction memLoadWillOverwrite(memory , addr, contents) {\n    for (let i = 0; i < contents.length; i++) {\n        if (addr + contents.length > memory.length) {\n            throw new Error(`Not enough memory to load ${memory.length} bytes at ${addr}`)\n        }\n\n        if (memory[addr + i] !== 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Assemble = function(machine, source, loadAtAddr=0) {\n    const tokens = lex(source);\n    let out = {};\n    const asm = assemble(tokens, machine, out);\n    memLoad(machine.memory, loadAtAddr, asm);\n    return out.disasm;\n };\n\nmodule.exports = Assemble;\n\n// source = `\n//     SETI R0 0\n//     SETI R1 1\n//     LABEL \"ADDANDINCR\"\n//     ADD R0 R1\n//     ADDI R1 1\n//     JMPEQIL R1 11 \"PRINTRES\"\n//     JMPL \"ADDANDINCR\"\n//     LABEL \"PRINTRES\"\n//     PRINT R0\n//   `;\n\n// SETI R0 0\n// SETI R1 1\n// LABEL \"ADDANDINCR\"\n// ADD R0 R1\n// ADDI R1 1\n// JMPEQIL R1 11 \"PRINTRES\"\n// JMPL \"ADDANDINCR\"\n// LABEL \"PRINTRES\"\n// PRINT R0\n\n// let machine = new CuteMachine(new Array(128).fill(0));\n// Assemble(machine, source);\n// machine.execute();\n\n\n// SETI R1 14\n// SETI R2 16\n// SETI R3 17\n// JMPGT R1 R2 R3\n// PRINT R2\n// JMPL DONE\n// PRINT R1\n// LABEL DONE\n// NOOP\n\n","import React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Badge from 'react-bootstrap/Badge'\n\nimport CuteMachine from './cute'\nconst Assemble = require('./assembler');\n\n/* props: setMemory(idx, value str) \n          memory : []\n*/\n\nconst STYLES = {\n    ripBgColor: 'LavenderBlush',\n    ripColor: 'black',\n    tableHeaderColor: 'ivory',\n    rspBgColor: 'Lavender',\n    rbpBgColor: 'red',\n};\n\nclass MachineStateView extends React.Component {\n    constructor(props) {\n        super(props);\n        const memory = new Array(1024).fill(0);\n        this.machine = new CuteMachine(memory, alert);\n        this.numAddrsToDisplay = 128;\n        this.numBytesPerRow = 16;\n        this.state = {\n            memory: memory,\n            memDisplayStartAddr: 0,\n            registers: this.machine.registers,\n            source: '',\n            asmArea: '',\n            loadAddr: 0,\n            disasmTokens: [],\n            disasmIsFresh: false,\n            docInstr: -1,\n        };\n\n    }\n\n    memSet(addr, val) {\n        val = parseInt(val);\n        if (isNaN(val)) { val = 0; }\n        this.machine.memory[addr] = val;\n        this.setState({ memory: this.machine.memory, disasmIsFresh: false });\n    }\n\n    regSet(num, val) {\n        val = parseInt(val);\n        if (isNaN(val)) { val = 0; }\n        this.machine.registers[num] = val;\n        this.setState({ registers: this.machine.registers });\n    }\n\n    setLoadAddr(val) {\n        val = parseInt(val);\n        if (isNaN(val) || val >= this.machine.memory.length) { val = 0; }\n        /* Changing load address invalidates disassembly */\n        this.setState({ loadAddr: val, disasmIsFresh: false });\n    }\n\n    run() {\n        this.machine.execute();\n        this.setState({ registers: this.machine.registers, memory: this.machine.memory });\n    }\n\n    step() {\n        this.machine.executeStep();\n        this.setState({ registers: this.machine.registers, memory: this.machine.memory });\n    }\n\n    inspectAddr(val) {\n        val = parseInt(val);\n        if (isNaN(val)) return;\n        if (val < 0 || val >= this.machine.memory.length) return;\n        this.setState({ memDisplayStartAddr: val });\n    }\n\n    asmAreaEdit(e) {\n        this.setState({ asmArea: e });\n    }\n\n    assemble() {\n        let tokens = [];\n        try {\n            tokens = Assemble(this.machine, this.state.asmArea, this.state.loadAddr);\n            this.machine.registers[this.machine.REGISTER_NUMS['RSP']] = (this.state.loadAddr || 0) + tokens.length + 1;\n            this.machine.registers[this.machine.REGISTER_NUMS['RBP']] = this.machine.registers[this.machine.REGISTER_NUMS['RSP']];\n            console.log(this.state.registers)\n            this.setState({ registers: this.machine.registers, memory: this.machine.memory, disasmTokens: tokens, disasmIsFresh: true });\n\n        } catch (e) {\n            alert(e);\n            this.setState({ registers: this.machine.registers, memory: this.machine.memory, disasmTokens: [], disasmIsFresh: false });\n\n        }\n    }\n\n    memPrev() {\n        let newAddr = this.state.memDisplayStartAddr - this.numAddrsToDisplay;\n        if (newAddr < 0) newAddr = 0;\n        this.setState({ memDisplayStartAddr: newAddr });\n\n    }\n\n    memNext() {\n        const newAddr = this.state.memDisplayStartAddr + this.numAddrsToDisplay;\n        if (newAddr >= this.machine.memory.length) return;\n        this.setState({ memDisplayStartAddr: newAddr });\n\n    }\n\n    availableInstrs() {\n        const instrs = [];\n        for (const [code, meta] of Object.entries(this.machine.OPCODES)) {\n            instrs.push({ name: meta.name, opCode: code, desc: meta.desc });\n        }\n        return instrs;\n    }\n\n    render() {\n        const bytes = this.state.memory.slice(this.state.memDisplayStartAddr,\n            this.state.memDisplayStartAddr + this.numAddrsToDisplay);\n        const memTable = [];\n        const ripValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RIP] - this.state.memDisplayStartAddr;\n        const rspValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RSP] - this.state.memDisplayStartAddr;\n        const rbpValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RBP] - this.state.memDisplayStartAddr;\n        bytes.forEach((_, i) => {\n            if (i % this.numBytesPerRow !== 0) return;\n            let cols = [];\n            for (let i = 0; i < this.numBytesPerRow; i++) { cols.push(i); }\n            memTable.push(\n                <tr>\n                    <td style={{ backgroundColor: STYLES.tableHeaderColor }}>{this.state.memDisplayStartAddr + i}</td>\n                    {cols.map(\n                        offset => {\n                            const addr = i + offset;\n                            const isRip = ripValueAdj === addr;\n                            const isRsp = rspValueAdj === addr;\n                            const isRbp = rbpValueAdj === addr;\n                            const dynaColor = isRip ? STYLES.ripBgColor : (isRsp ? STYLES.rspBgColor : (isRbp ? STYLES.rbpBgColor : ''));\n                            const absoluteAddr = addr + this.state.memDisplayStartAddr;\n                            const disasmAvailable = this.state.disasmIsFresh\n                                && absoluteAddr >= this.state.loadAddr\n                                && absoluteAddr < (this.state.loadAddr + this.state.disasmTokens.length);\n\n\n                            return <td key={`mem-${i + offset}`}\n                                style={{ backgroundColor: dynaColor, overflow: 'hidden' }}>\n                                {disasmAvailable ? <div class=\"disasm\">{this.state.disasmTokens[absoluteAddr - this.state.loadAddr]}</div> : ''}\n                                <input\n                                    type=\"text\"\n                                    style={{\n                                        width: '100%', border: 'none',\n                                        backgroundColor: dynaColor,\n                                    }}\n                                    onChange={e => this.memSet(i + offset, e.target.value)}\n                                    value={bytes[i + offset]}\n                                    disabled={i + offset + this.state.memDisplayStartAddr >= this.state.memory.length}\n                                /> </td>\n\n                        })}\n                </tr>\n            );\n        });\n\n        return <div className=\"monospaced\">  {/* <<  Flip this as needed */}\n            <Container>\n                <Row style={{ textAlign: \"center\" }}>\n                    <Col md={2}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>CPU</b></Col></Row>\n                        <Table bordered responsive size=\"sm\">\n                            <tbody>\n                                {this.state.registers.map((value, i) => {\n                                    const isRip = this.machine.REGISTER_NAMES[i] === 'RIP';\n                                    const isRsp = this.machine.REGISTER_NAMES[i] === 'RSP';\n                                    const isRbp = this.machine.REGISTER_NAMES[i] === 'RBP';\n                                    const dynaColor = isRip ? STYLES.ripBgColor : (isRsp ? STYLES.rspBgColor : (isRbp ? STYLES.rbpBgColor : ''));\n                                    return <tr>\n                                        <td style={{ backgroundColor: STYLES.tableHeaderColor }}>{this.machine.REGISTER_NAMES[i]}</td>\n                                        <td key={`mem-${i}`} style={{ backgroundColor: dynaColor }}>\n                                            <input type=\"text\"\n                                                style={{ width: '100%', border: 'none', backgroundColor: dynaColor }}\n                                                value={value}\n                                                onChange={e => this.regSet(i, e.target.value)} /></td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </Table>\n                        <Row>\n                            <Col>\n                                <Button variant=\"light\" onClick={() => this.run()}>Run</Button>\n                                <Button style={{ marginLeft: '2px' }} variant=\"light\" onClick={() => this.step()}>Step</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col md={10}>\n                        <Col md={12}>\n                            <Row><Col style={{ marginBottom: '10px' }}><b>Memory</b></Col></Row>\n                            <Table bordered responsive size=\"sm\">\n                                <tbody>\n                                    {memTable}\n                                </tbody>\n                            </Table>\n                            <Row style={{ marginBottom: '5px', marginLeft: '5px' }}>\n                                <Button variant=\"light\" onClick={() => this.memPrev()}> {'<'} </Button>\n                                <Button style={{ marginLeft: '2px' }} variant=\"light\" onClick={() => this.memNext()}> {'>'} </Button>\n                                <input type=\"text\" style={{ border: 'solid 1px lightgray', marginLeft: '15px', paddingLeft: '10px' }} onChange={(e) => this.inspectAddr(e.target.value)} placeholder=\"Go to address\" />\n                            </Row>\n                        </Col>\n                    </Col>\n                </Row>\n\n                <hr />\n\n                <Row style={{ textAlign: \"center\", marginTop: '10px' }}>\n                    <Col sm={6}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>Assembler</b></Col></Row>\n                        <Row>\n                            <textarea placeholder=\"Assembly Editor\"\n                                style={{ width: '100%', height: '100%', minHeight: '220px', paddingLeft: '10px', borderColor: 'lightgray' }}\n                                value={this.state.asmArea}\n                                onChange={e => this.asmAreaEdit(e.target.value)} />\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <InputGroup style={{ marginTop: '5px' }}>\n                                    <FormControl\n                                        onChange={(e) => this.setLoadAddr(e.target.value)}\n                                        placeholder=\"Address to load program at (Default = 0)\"\n                                    />\n                                    <InputGroup.Append>\n                                        <Button variant=\"info\" onClick={() => this.assemble()}>Load</Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </Col>\n\n\n                    <Col sm={6}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>Instruction Set</b></Col></Row>\n                        <Row>\n                            <Col sm={12} style={{ overflowY: 'scroll' }}>\n                                <h5>\n                                    {this.availableInstrs().map((instr, i) => <a onClick={()=>this.setState({docInstr: i})}><Badge pill variant={this.state.docInstr === i ? 'primary' : 'light'}>{instr.name}</Badge>{' '}</a>)}\n                                </h5>\n                                <br/>\n                                { this.state.docInstr === -1 ? '' : this.availableInstrs()[this.state.docInstr].desc}\n                            </Col>\n                        </Row>\n                    </Col>\n\n                </Row>\n            </Container>\n        </div >\n    };\n\n};\n\nexport default MachineStateView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport MachineStateView from './MachineStateView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br/><br/>\n          <MachineStateView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}